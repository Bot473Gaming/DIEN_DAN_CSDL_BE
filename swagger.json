{
  "openapi": "3.0.0",
  "paths": {
    "/users": {
      "get": {
        "operationId": "UserController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all users",
        "tags": [
          "users"
        ]
      },
      "post": {
        "operationId": "UserController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created"
          },
          "400": {
            "description": "Invalid input"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Create a new user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "UserController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return current user profile"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "UserController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile successfully updated"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update current user profile",
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "UserController_deleteProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User account successfully deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete current user account",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UserController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Get user by ID",
        "tags": [
          "users"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "default": {
            "description": ""
          }
        },
        "summary": "User login",
        "tags": [
          "auth"
        ]
      }
    },
    "/category": {
      "get": {
        "operationId": "CategoryController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of categories to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of categories to take",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in name and description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of categories with total count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all categories with optional filters",
        "tags": [
          "categories"
        ]
      },
      "post": {
        "operationId": "CategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new category (Admin only)",
        "tags": [
          "categories"
        ]
      }
    },
    "/category/{id}": {
      "get": {
        "operationId": "CategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return category details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get category by ID",
        "tags": [
          "categories"
        ]
      },
      "put": {
        "operationId": "CategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Category not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a category (Admin only)",
        "tags": [
          "categories"
        ]
      },
      "delete": {
        "operationId": "CategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Category not found"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a category (Admin only)",
        "tags": [
          "categories"
        ]
      }
    },
    "/post": {
      "get": {
        "operationId": "PostController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of posts to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of posts to take",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagIds",
            "required": false,
            "in": "query",
            "description": "Filter by tag IDs (comma-separated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in title and content",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of posts with total count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "posts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all posts with optional filters",
        "tags": [
          "posts"
        ]
      },
      "post": {
        "operationId": "PostController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new post",
        "tags": [
          "posts"
        ]
      }
    },
    "/post/{id}": {
      "get": {
        "operationId": "PostController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return post details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get post by ID",
        "tags": [
          "posts"
        ]
      },
      "put": {
        "operationId": "PostController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not authorized to update post"
          },
          "404": {
            "description": "Post not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a post",
        "tags": [
          "posts"
        ]
      },
      "delete": {
        "operationId": "PostController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not authorized to delete post"
          },
          "404": {
            "description": "Post not found"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a post",
        "tags": [
          "posts"
        ]
      }
    },
    "/post/{id}/lock": {
      "put": {
        "operationId": "PostController_toggleLock",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post lock status toggled successfully"
          },
          "403": {
            "description": "Not authorized to lock/unlock post"
          },
          "404": {
            "description": "Post not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Toggle post lock status (Admin only)",
        "tags": [
          "posts"
        ]
      }
    },
    "/comment": {
      "get": {
        "operationId": "CommentController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of comments to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of comments to take",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "postId",
            "required": false,
            "in": "query",
            "description": "Filter by post ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentCommentId",
            "required": false,
            "in": "query",
            "description": "Filter by parent comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of comments with total count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all comments with optional filters",
        "tags": [
          "comments"
        ]
      },
      "post": {
        "operationId": "CommentController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Cannot comment on a locked post"
          },
          "404": {
            "description": "Post not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new comment",
        "tags": [
          "comments"
        ]
      }
    },
    "/comment/{id}": {
      "get": {
        "operationId": "CommentController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return comment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get comment by ID",
        "tags": [
          "comments"
        ]
      },
      "put": {
        "operationId": "CommentController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not authorized to update comment"
          },
          "404": {
            "description": "Comment not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a comment",
        "tags": [
          "comments"
        ]
      },
      "delete": {
        "operationId": "CommentController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not authorized to delete comment"
          },
          "404": {
            "description": "Comment not found"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a comment",
        "tags": [
          "comments"
        ]
      }
    },
    "/vote": {
      "get": {
        "operationId": "VoteController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of votes to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of votes to take",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "postId",
            "required": false,
            "in": "query",
            "description": "Filter by post ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by vote type (upvote/downvote)",
            "schema": {
              "enum": [
                1,
                -1
              ],
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of votes with total count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "votes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Vote"
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all votes with optional filters",
        "tags": [
          "votes"
        ]
      },
      "post": {
        "operationId": "VoteController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVoteDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vote created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vote"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Post not found"
          },
          "409": {
            "description": "User has already voted on this post"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vote"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new vote",
        "tags": [
          "votes"
        ]
      }
    },
    "/vote/{id}": {
      "delete": {
        "operationId": "VoteController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vote removed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not authorized to remove this vote"
          },
          "404": {
            "description": "Vote not found"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Remove a vote",
        "tags": [
          "votes"
        ]
      }
    },
    "/tag": {
      "get": {
        "operationId": "TagController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of tags to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of tags to take",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in name and description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of tags with total count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      }
                    },
                    "total": {
                      "type": "number",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all tags with optional filters",
        "tags": [
          "tags"
        ]
      },
      "post": {
        "operationId": "TagController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new tag (Admin only)",
        "tags": [
          "tags"
        ]
      }
    },
    "/tag/{id}": {
      "get": {
        "operationId": "TagController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return tag details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get tag by ID",
        "tags": [
          "tags"
        ]
      },
      "put": {
        "operationId": "TagController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Tag not found"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a tag (Admin only)",
        "tags": [
          "tags"
        ]
      },
      "delete": {
        "operationId": "TagController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Tag not found"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a tag (Admin only)",
        "tags": [
          "tags"
        ]
      }
    },
    "/notifications": {
      "post": {
        "operationId": "NotificationController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tạo thông báo thành công",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Tạo thông báo mới",
        "tags": [
          "notifications"
        ]
      },
      "get": {
        "operationId": "NotificationController_findAll",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "isRead",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Danh sách thông báo"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Lấy danh sách thông báo của người dùng hiện tại",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/unread/count": {
      "get": {
        "operationId": "NotificationController_getUnreadCount",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Số lượng thông báo chưa đọc"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Đếm số thông báo chưa đọc",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/{id}/read": {
      "patch": {
        "operationId": "NotificationController_markAsRead",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Đánh dấu đã đọc thành công"
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Đánh dấu thông báo đã đọc",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/read/all": {
      "patch": {
        "operationId": "NotificationController_markAllAsRead",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Đánh dấu tất cả đã đọc thành công"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Đánh dấu tất cả thông báo đã đọc",
        "tags": [
          "notifications"
        ]
      }
    },
    "/notifications/{id}": {
      "delete": {
        "operationId": "NotificationController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Xóa thông báo thành công"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Xóa thông báo",
        "tags": [
          "notifications"
        ]
      }
    }
  },
  "info": {
    "title": "My API",
    "description": "The API docs",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User ID"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "User password"
          },
          "fullname": {
            "type": "string",
            "description": "User full name"
          },
          "role": {
            "enum": [
              "admin",
              "user"
            ],
            "type": "string",
            "description": "User role"
          }
        },
        "required": [
          "_id",
          "email",
          "username",
          "password",
          "fullname",
          "role"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "User password"
          },
          "fullname": {
            "type": "string",
            "description": "User full name"
          }
        },
        "required": [
          "email",
          "username",
          "password",
          "fullname"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "User password"
          },
          "fullname": {
            "type": "string",
            "description": "User full name"
          }
        }
      },
      "SignInDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "description": "Password",
            "example": "password123"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the category",
            "example": "Technology"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the category",
            "example": "Technology"
          }
        }
      },
      "Vote": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID duy nhất của lượt bình chọn"
          },
          "user": {
            "description": "Người dùng thực hiện bình chọn",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "userId": {
            "type": "string",
            "description": "ID của người dùng thực hiện bình chọn"
          },
          "targetType": {
            "enum": [
              "post",
              "comment"
            ],
            "type": "string",
            "description": "Loại đối tượng được bình chọn (bài viết hoặc bình luận)",
            "example": "post"
          },
          "targetId": {
            "type": "string",
            "description": "ID của đối tượng được bình chọn"
          },
          "voteValue": {
            "enum": [
              1,
              -1
            ],
            "type": "number",
            "description": "Giá trị bình chọn (1 cho upvote, -1 cho downvote)",
            "example": 1
          },
          "post": {
            "description": "Bài viết được bình chọn (nếu có)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Post"
              }
            ]
          },
          "comment": {
            "description": "Bình luận được bình chọn (nếu có)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Comment"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Thời điểm tạo bình chọn"
          }
        },
        "required": [
          "_id",
          "user",
          "userId",
          "targetType",
          "targetId",
          "voteValue",
          "createdAt"
        ]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID duy nhất của bình luận"
          },
          "post": {
            "description": "Bài viết chứa bình luận này",
            "allOf": [
              {
                "$ref": "#/components/schemas/Post"
              }
            ]
          },
          "postId": {
            "type": "string",
            "description": "ID của bài viết"
          },
          "user": {
            "description": "Tác giả bình luận",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "userId": {
            "type": "string",
            "description": "ID của tác giả"
          },
          "content": {
            "type": "string",
            "description": "Nội dung bình luận"
          },
          "parentComment": {
            "description": "Bình luận cha (nếu là bình luận trả lời)",
            "allOf": [
              {
                "$ref": "#/components/schemas/Comment"
              }
            ]
          },
          "parentCommentId": {
            "type": "string",
            "description": "ID của bình luận cha (nếu có)"
          },
          "replies": {
            "description": "Các bình luận trả lời",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "votes": {
            "description": "Các lượt bình chọn của bình luận",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vote"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Thời điểm tạo bình luận"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Thời điểm cập nhật bình luận"
          }
        },
        "required": [
          "_id",
          "post",
          "postId",
          "user",
          "userId",
          "content",
          "replies",
          "votes",
          "createdAt",
          "updatedAt"
        ]
      },
      "Post": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID duy nhất của bài viết"
          },
          "title": {
            "type": "string",
            "description": "Tiêu đề bài viết",
            "maxLength": 255
          },
          "content": {
            "type": "string",
            "description": "Nội dung bài viết"
          },
          "user": {
            "description": "Tác giả bài viết",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "userId": {
            "type": "string",
            "description": "ID của tác giả"
          },
          "category": {
            "description": "Danh mục của bài viết",
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              }
            ]
          },
          "categoryId": {
            "type": "string",
            "description": "ID của danh mục"
          },
          "tags": {
            "description": "Các thẻ được gắn cho bài viết",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "comments": {
            "description": "Các bình luận của bài viết",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "votes": {
            "description": "Các lượt bình chọn của bài viết",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vote"
            }
          },
          "isLocked": {
            "type": "boolean",
            "description": "Trạng thái khóa của bài viết"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Thời điểm tạo bài viết"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Thời điểm cập nhật bài viết"
          }
        },
        "required": [
          "_id",
          "title",
          "content",
          "user",
          "userId",
          "category",
          "categoryId",
          "tags",
          "comments",
          "votes",
          "isLocked",
          "createdAt",
          "updatedAt"
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID duy nhất của thẻ"
          },
          "tagName": {
            "type": "string",
            "description": "Tên của thẻ",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "Mô tả của thẻ"
          },
          "posts": {
            "description": "Các bài viết được gắn thẻ này",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Post"
            }
          }
        },
        "required": [
          "_id",
          "tagName",
          "posts"
        ]
      },
      "CreatePostDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Tiêu đề bài viết",
            "maxLength": 255
          },
          "content": {
            "type": "string",
            "description": "Nội dung bài viết"
          },
          "categoryId": {
            "type": "string",
            "description": "ID của danh mục"
          },
          "tagIds": {
            "description": "Danh sách ID của các thẻ",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "content",
          "categoryId"
        ]
      },
      "UpdatePostDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Tiêu đề bài viết",
            "maxLength": 255
          },
          "content": {
            "type": "string",
            "description": "Nội dung bài viết"
          },
          "tagIds": {
            "description": "Danh sách ID của các thẻ",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isLocked": {
            "type": "boolean",
            "description": "Trạng thái khóa của bài viết"
          }
        }
      },
      "CreateCommentDto": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string",
            "description": "ID của bài viết"
          },
          "content": {
            "type": "string",
            "description": "Nội dung bình luận"
          },
          "parentCommentId": {
            "type": "string",
            "description": "ID của bình luận cha (nếu là bình luận trả lời)"
          }
        }
      },
      "UpdateCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Nội dung bình luận"
          }
        }
      },
      "CreateVoteDto": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "string",
            "description": "ID of the target (post or comment) to vote on",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "targetType": {
            "enum": [
              "post",
              "comment"
            ],
            "type": "string",
            "description": "Type of the target (post or comment)",
            "example": "post"
          },
          "voteValue": {
            "enum": [
              1,
              -1
            ],
            "type": "number",
            "description": "Type of vote (upvote or downvote)",
            "example": 1
          }
        },
        "required": [
          "targetId",
          "targetType",
          "voteValue"
        ]
      },
      "CreateTagDto": {
        "type": "object",
        "properties": {
          "tagName": {
            "type": "string",
            "description": "The name of the tag",
            "maxLength": 50,
            "example": "technology"
          },
          "description": {
            "type": "string",
            "description": "The description of the tag",
            "example": "Posts about technology and innovation"
          }
        },
        "required": [
          "tagName"
        ]
      },
      "UpdateTagDto": {
        "type": "object",
        "properties": {
          "tagName": {
            "type": "string",
            "description": "The name of the tag",
            "maxLength": 50,
            "example": "technology"
          },
          "description": {
            "type": "string",
            "description": "The description of the tag",
            "example": "Posts about technology and innovation"
          }
        }
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "ID người dùng nhận thông báo"
          },
          "type": {
            "enum": [
              "post_created",
              "comment_created",
              "post_voted",
              "comment_voted",
              "post_reported",
              "comment_reported",
              "report_resolved"
            ],
            "type": "string",
            "description": "Loại thông báo"
          },
          "content": {
            "type": "string",
            "description": "Nội dung thông báo"
          }
        },
        "required": [
          "userId",
          "type",
          "content"
        ]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID của thông báo"
          },
          "user": {
            "description": "Người dùng nhận thông báo",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "userId": {
            "type": "string",
            "description": "ID người dùng nhận thông báo"
          },
          "type": {
            "enum": [
              "post_created",
              "comment_created",
              "post_voted",
              "comment_voted",
              "post_reported",
              "comment_reported",
              "report_resolved"
            ],
            "type": "string",
            "description": "Loại thông báo"
          },
          "content": {
            "type": "string",
            "description": "Nội dung thông báo"
          },
          "isRead": {
            "type": "boolean",
            "description": "Trạng thái đã đọc"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Thời gian tạo"
          }
        },
        "required": [
          "_id",
          "user",
          "userId",
          "type",
          "content",
          "isRead",
          "createdAt"
        ]
      }
    }
  }
}